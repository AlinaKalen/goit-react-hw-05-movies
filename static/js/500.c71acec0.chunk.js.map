{"version":3,"file":"static/js/500.c71acec0.chunk.js","mappings":"qLAEA,MAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QALY,sCASHC,EAAcC,gBACFN,EAASO,IAAI,uBACpBC,KAAKC,QAGVC,EAAqBJ,gBACTN,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CAAEQ,MAAOC,MAEHJ,KAAKC,QAGVI,EAAkBP,UAC7B,IAME,aALuBN,EAASO,IAAI,UAADO,OAAWC,GAAM,CAClDZ,OAAQ,CACNa,mBAAoB,mBAGRR,IAIlB,CAHE,MAAOS,GAEP,MADAC,QAAQD,MAAM,8BAA+BA,EAAME,SAC7CF,CACR,GAGWG,EAAgBd,gBACJN,EAASO,IAAI,UAADO,OAAWC,EAAE,WAChCP,KAGLa,EAAmBf,gBACPN,EAASO,IAAI,UAADO,OAAWC,EAAE,cAChCP,I,6DCzClB,MAYA,EAZmBc,IAA+B,IAA9B,SAAEC,EAAQ,OAAEC,EAAM,GAAEC,GAAIH,EAC1C,OACEI,EAAAA,EAAAA,KAAA,MAAAC,SACS,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQI,KAAIC,IAAA,IAAC,GAAEd,EAAE,eAAEe,GAAgBD,EAAA,OAClCH,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACN,GAAE,GAAAX,OAAKW,GAAEX,OAAGC,GAAMiB,MAAO,CAAEC,KAAMV,GAAWI,SAAGG,KAD9Cf,EAEJ,KAEJ,C,oFCVT,QAA4B,wBAA5B,EAA4D,oBAA5D,EAA4F,wB,aCG5F,MAqBA,EArBmBO,IAAmB,IAAlB,SAAEY,GAAUZ,EAC9B,MAAOX,EAAOwB,IAAYC,EAAAA,EAAAA,UAAS,IAOnC,OACEC,EAAAA,EAAAA,MAAA,QAAMH,SANcI,IACpBA,EAAEC,iBACFL,EAASvB,EAAM,EAIe6B,UAAWC,EAAUd,SAAA,EACjDD,EAAAA,EAAAA,KAAA,SAAOc,UAAYC,EACjBC,KAAK,OACLC,MAAOhC,EACPiC,SAAWN,GAAMH,EAASG,EAAEO,OAAOF,OACnCG,YAAY,sBAEdpB,EAAAA,EAAAA,KAAA,UAAQgB,KAAK,SAASF,UAAWC,EAAcd,SAAC,aAC3C,E,aCdX,MA+BA,EA/BmBoB,KAEjB,MAAOC,EAAcC,IAAmBb,EAAAA,EAAAA,UAAS,KAC1Cc,EAAcC,IAAmBC,EAAAA,EAAAA,MAClC7B,GAAW8B,EAAAA,EAAAA,MAcjB,OAPAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAcL,EAAa3C,IAAI,SACjCgD,IACF7C,EAAAA,EAAAA,IAAmB6C,GAAaC,MAAMC,GAAQR,EAAgBQ,IAChE,GACC,CAACP,KAGFb,EAAAA,EAAAA,MAAAqB,EAAAA,SAAA,CAAA/B,SAAA,EACEU,EAAAA,EAAAA,MAAA,OAAAV,SAAA,EACED,EAAAA,EAAAA,KAACiC,EAAU,CAACzB,SAfIS,IACpBQ,EAAgB,CAAExC,MAAOgC,GAAQ,KAe7BjB,EAAAA,EAAAA,KAACkC,EAAAA,EAAU,CAACnC,GAAI,GAAID,OAAQwB,EAAczB,SAAUA,QAEtDG,EAAAA,EAAAA,KAACmC,EAAAA,SAAQ,CAACC,UAAUpC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAAiBA,UACxCD,EAAAA,EAAAA,KAACqC,EAAAA,GAAM,QAER,C","sources":["components/Api/Api.js","components/MoviesList/MoviesList.js","webpack://react-homework-template/./src/components/SearchForm/Form.module.css?e177","components/SearchForm/SearchForm.js","pages/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst api_key = '9ec68717ac0ee3cd927e52637a51d9f9';\n\nconst movieApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: api_key,\n  },\n});\n\nexport const fetchMovies = async () => {\n  const response = await movieApi.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMoviesByQuery = async (searchQuery) => {\n  const response = await movieApi.get('/search/movie', {\n    params: { query: searchQuery },\n  });\n  return response.data.results;\n};\n\nexport const fetchMoviesById = async (id) => {\n  try {\n    const response = await movieApi.get(`/movie/${id}`, {\n      params: {\n        append_to_response: 'cast,reviews',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie by ID:', error.message);\n    throw error;\n  }\n};\n\nexport const fetchCastById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/cast`);\n  return response.data;\n};\n\nexport const fetchReviewsById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst MoviesList = ({ location, movies, to }) => {\n  return (\n    <ul>\n      {movies?.map(({ id, original_title }) => (\n        <li key={id}>\n          <Link to={`${to}${id}`} state={{ from: location }} >{original_title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default MoviesList;","// extracted by mini-css-extract-plugin\nexport default {\"Forminput\":\"Form_Forminput__yIu28\",\"Formf\":\"Form_Formf__DgwX2\",\"SrcButton\":\"Form_SrcButton__6xSfC\"};","\nimport React, { useState } from 'react';\nimport css from './Form.module.css';\n\nconst SearchForm = ({ onSubmit }) => {\n  const [query, setQuery] = useState('');\n\n  const handleSubmit = (e) => {\n    e.preventDefault();\n    onSubmit(query);\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className={css.Formf}>\n      <input className= {css.Forminput}\n        type=\"text\"\n        value={query}\n        onChange={(e) => setQuery(e.target.value)}\n        placeholder=\"Search movies...\"\n      />\n      <button type=\"submit\" className={css.SrcButton}>Search</button>\n    </form>\n  );\n};\n\nexport default SearchForm;\n","\nimport React, { useEffect, useState, Suspense } from 'react';\nimport { Outlet, useLocation, useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByQuery } from '../components/Api/Api';\nimport SearchForm from '../components/SearchForm/SearchForm';\nimport MoviesList from '../components/MoviesList/MoviesList';\n\nconst MoviesPage = () => {\n  \n  const [searchMovies, setSearchMovies] = useState([]);\n  const [searchParams, setSearchParams] = useSearchParams();\n  const location = useLocation();\n\n  const handleSubmit = (value) => {\n    setSearchParams({ query: value });\n    \n  };\n\n  useEffect(() => {\n    const queryParams = searchParams.get('query');\n    if (queryParams) {\n      fetchMoviesByQuery(queryParams).then((res) => setSearchMovies(res));\n    }\n  }, [searchParams]);\n\n  return (\n    <>\n      <div>\n        <SearchForm onSubmit={handleSubmit} />\n        <MoviesList to={''} movies={searchMovies} location={location} />\n      </div>\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  );\n};\n\nexport default MoviesPage;\n"],"names":["movieApi","axios","baseURL","params","api_key","fetchMovies","async","get","data","results","fetchMoviesByQuery","query","searchQuery","fetchMoviesById","concat","id","append_to_response","error","console","message","fetchCastById","fetchReviewsById","_ref","location","movies","to","_jsx","children","map","_ref2","original_title","Link","state","from","onSubmit","setQuery","useState","_jsxs","e","preventDefault","className","css","type","value","onChange","target","placeholder","MoviesPage","searchMovies","setSearchMovies","searchParams","setSearchParams","useSearchParams","useLocation","useEffect","queryParams","then","res","_Fragment","SearchForm","MoviesList","Suspense","fallback","Outlet"],"sourceRoot":""}