{"version":3,"file":"static/js/797.57883d19.chunk.js","mappings":"qLAEA,MAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QALY,sCASHC,EAAcC,gBACFN,EAASO,IAAI,uBACpBC,KAAKC,QAGVC,EAAqBJ,gBACTN,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CAAEQ,MAAOC,MAEHJ,KAAKC,QAGVI,EAAkBP,UAC7B,IAME,aALuBN,EAASO,IAAI,UAADO,OAAWC,GAAM,CAClDZ,OAAQ,CACNa,mBAAoB,sBAGRR,IAIlB,CAHE,MAAOS,GAEP,MADAC,QAAQD,MAAM,8BAA+BA,EAAME,SAC7CF,CACR,GAGWG,EAAgBd,gBACJN,EAASO,IAAI,UAADO,OAAWC,EAAE,cAChCP,KAGLa,EAAmBf,gBACPN,EAASO,IAAI,UAADO,OAAWC,EAAE,cAChCP,I,6DCzClB,MAYA,EAZmBc,IAA+B,IAA9B,SAAEC,EAAQ,OAAEC,EAAM,GAAEC,GAAIH,EAC1C,OACEI,EAAAA,EAAAA,KAAA,MAAAC,SACS,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQI,KAAIC,IAAA,IAAC,GAAEd,EAAE,eAAEe,GAAgBD,EAAA,OAClCH,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACN,GAAE,GAAAX,OAAKW,GAAEX,OAAGC,GAAMiB,MAAO,CAAEC,KAAMV,GAAWI,SAAGG,KAD9Cf,EAEJ,KAEJ,C,sGCNT,MAqCA,EArCmBmB,KACjB,MAAM,SAAEC,IAAaC,EAAAA,EAAAA,OACdzB,EAAO0B,IAAYC,EAAAA,EAAAA,UAAS,KAC5BC,EAAcC,IAAmBF,EAAAA,EAAAA,UAAS,KAC1CG,EAAcC,IAAmBC,EAAAA,EAAAA,IAAgB,CAAC,GACnDpB,GAAWqB,EAAAA,EAAAA,MAejB,OARAC,EAAAA,EAAAA,YAAU,KACR,MAAMC,EAAcL,EAAalC,IAAI,SAClCuC,IACDT,EAASS,IACTpC,EAAAA,EAAAA,IAAmBoC,GAAaC,MAAKC,GAAOR,EAAgBQ,KAC9D,GACC,CAACP,KAGFQ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAvB,SAAA,EACIQ,IAAYc,EAAAA,EAAAA,MAAA,OAAAtB,SAAA,EACZD,EAAAA,EAAAA,KAAA,OAAAC,SAAK,mBACLsB,EAAAA,EAAAA,MAAA,QAAME,SAjBS7C,UACnB8C,EAAEC,iBACFX,EAAgB,CAAE/B,SAAQ,EAeOgB,SAAA,EAC3BD,EAAAA,EAAAA,KAAA,SAAO4B,KAAK,OAAOC,SAAWH,GAAMf,EAASe,EAAEI,OAAOC,OAAQA,MAAO9C,KACrEe,EAAAA,EAAAA,KAAA,UAAQ4B,KAAK,SAAQ3B,SAAC,aAExBD,EAAAA,EAAAA,KAACgC,EAAAA,EAAU,CAACjC,GAAI,GAAID,OAAQe,EAAchB,SAAUA,QAEtDG,EAAAA,EAAAA,KAACiC,EAAAA,SAAQ,CAACC,UAAUlC,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAAiBA,UACxCD,EAAAA,EAAAA,KAACmC,EAAAA,GAAM,QAER,C","sources":["components/Api/Api.js","components/MoviesList/MoviesList.js","pages/MoviesPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst api_key = '9ec68717ac0ee3cd927e52637a51d9f9';\n\nconst movieApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: api_key,\n  },\n});\n\nexport const fetchMovies = async () => {\n  const response = await movieApi.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMoviesByQuery = async (searchQuery) => {\n  const response = await movieApi.get('/search/movie', {\n    params: { query: searchQuery },\n  });\n  return response.data.results;\n};\n\nexport const fetchMoviesById = async (id) => {\n  try {\n    const response = await movieApi.get(`/movie/${id}`, {\n      params: {\n        append_to_response: 'credits,reviews',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie by ID:', error.message);\n    throw error;\n  }\n};\n\nexport const fetchCastById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/credits`);\n  return response.data;\n};\n\nexport const fetchReviewsById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst MoviesList = ({ location, movies, to }) => {\n  return (\n    <ul>\n      {movies?.map(({ id, original_title }) => (\n        <li key={id}>\n          <Link to={`${to}${id}`} state={{ from: location }} >{original_title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default MoviesList;","import MoviesList from '../components/MoviesList/MoviesList';\nimport { Suspense, useEffect, useState } from 'react';\nimport { Outlet, useLocation, useParams, useSearchParams } from 'react-router-dom';\nimport { fetchMoviesByQuery } from '../components/Api/Api';\n\nconst MoviesPage = () => {\n  const { moviesId } = useParams();\n  const [query, setQuery] = useState('')\n  const [searchMovies, setSearchMovies] = useState([])\n  const [searchParams, setSearchParams] = useSearchParams({});\n  const location = useLocation();\n\n  const HandleSubmit = async (e) => {\n    e.preventDefault()\n    setSearchParams({ query })\n  }\n\n  useEffect(() => {\n    const queryParams = searchParams.get('query')\n    if(queryParams){\n      setQuery(queryParams)\n      fetchMoviesByQuery(queryParams).then(res => setSearchMovies(res))\n    }\n  }, [searchParams])\n\n  return (\n    <>\n      {!moviesId && <div>\n        <div>Search movies</div>\n        <form onSubmit={HandleSubmit}>\n          <input type=\"text\" onChange={(e) => setQuery(e.target.value)} value={query} />\n          <button type='submiy'>Send</button>\n        </form>\n        <MoviesList to={''} movies={searchMovies} location={location} />\n      </div>}\n      <Suspense fallback={<div>Loading...</div>}>\n        <Outlet />\n      </Suspense>\n    </>\n  )\n}\n\nexport default MoviesPage"],"names":["movieApi","axios","baseURL","params","api_key","fetchMovies","async","get","data","results","fetchMoviesByQuery","query","searchQuery","fetchMoviesById","concat","id","append_to_response","error","console","message","fetchCastById","fetchReviewsById","_ref","location","movies","to","_jsx","children","map","_ref2","original_title","Link","state","from","MoviesPage","moviesId","useParams","setQuery","useState","searchMovies","setSearchMovies","searchParams","setSearchParams","useSearchParams","useLocation","useEffect","queryParams","then","res","_jsxs","_Fragment","onSubmit","e","preventDefault","type","onChange","target","value","MoviesList","Suspense","fallback","Outlet"],"sourceRoot":""}