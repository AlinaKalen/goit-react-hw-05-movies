{"version":3,"file":"static/js/983.e25d9bed.chunk.js","mappings":"qLAEA,MAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QALY,sCASHC,EAAcC,gBACFN,EAASO,IAAI,uBACpBC,KAAKC,QAGVC,EAAqBJ,gBACTN,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CAAEQ,MAAOC,MAEHJ,KAAKC,QAGVI,EAAkBP,UAC7B,IAME,aALuBN,EAASO,IAAI,UAADO,OAAWC,GAAM,CAClDZ,OAAQ,CACNa,mBAAoB,mBAGRR,IAIlB,CAHE,MAAOS,GAEP,MADAC,QAAQD,MAAM,8BAA+BA,EAAME,SAC7CF,CACR,GAGWG,EAAgBd,gBACJN,EAASO,IAAI,UAADO,OAAWC,EAAE,WAChCP,KAGLa,EAAmBf,gBACPN,EAASO,IAAI,UAADO,OAAWC,EAAE,cAChCP,I,6DCzClB,MAYA,EAZmBc,IAA+B,IAA9B,SAAEC,EAAQ,OAAEC,EAAM,GAAEC,GAAIH,EAC1C,OACEI,EAAAA,EAAAA,KAAA,MAAAC,SACS,OAANH,QAAM,IAANA,OAAM,EAANA,EAAQI,KAAIC,IAAA,IAAC,GAAEd,EAAE,eAAEe,GAAgBD,EAAA,OAClCH,EAAAA,EAAAA,KAAA,MAAAC,UACED,EAAAA,EAAAA,KAACK,EAAAA,GAAI,CAACN,GAAE,GAAAX,OAAKW,GAAEX,OAAGC,GAAMiB,MAAO,CAAEC,KAAMV,GAAWI,SAAGG,KAD9Cf,EAEJ,KAEJ,C,8FCNT,MAsBA,EAtBiBmB,KACf,MAAOV,EAAQW,IAAaC,EAAAA,EAAAA,UAAS,IAC/Bb,GAAWc,EAAAA,EAAAA,MAUjB,OARAC,EAAAA,EAAAA,YAAU,KACUhC,WAChB,MAAMiC,QAAmBlC,EAAAA,EAAAA,MACzB8B,EAAUI,EAAW,EAEvBC,EAAW,GACV,KAGDC,EAAAA,EAAAA,MAACC,EAAAA,SAAQ,CAACC,UAAUjB,EAAAA,EAAAA,KAAA,OAAAC,SAAK,eAAiBA,SAAA,EACxCD,EAAAA,EAAAA,KAAA,MAAAC,SAAI,sBACJD,EAAAA,EAAAA,KAACkB,EAAAA,EAAS,CAACnB,GAAI,UAAWF,SAAUA,EAAUC,OAAQA,MAE7C,C","sources":["components/Api/Api.js","components/MoviesList/MoviesList.js","pages/HomePage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst api_key = '9ec68717ac0ee3cd927e52637a51d9f9';\n\nconst movieApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: api_key,\n  },\n});\n\nexport const fetchMovies = async () => {\n  const response = await movieApi.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMoviesByQuery = async (searchQuery) => {\n  const response = await movieApi.get('/search/movie', {\n    params: { query: searchQuery },\n  });\n  return response.data.results;\n};\n\nexport const fetchMoviesById = async (id) => {\n  try {\n    const response = await movieApi.get(`/movie/${id}`, {\n      params: {\n        append_to_response: 'cast,reviews',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie by ID:', error.message);\n    throw error;\n  }\n};\n\nexport const fetchCastById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/cast`);\n  return response.data;\n};\n\nexport const fetchReviewsById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n","import React from 'react'\nimport { Link } from 'react-router-dom'\n\nconst MoviesList = ({ location, movies, to }) => {\n  return (\n    <ul>\n      {movies?.map(({ id, original_title }) => (\n        <li key={id}>\n          <Link to={`${to}${id}`} state={{ from: location }} >{original_title}</Link>\n        </li>\n      ))}\n    </ul>\n  )\n}\n\nexport default MoviesList;","import MovieList from '../components/MoviesList/MoviesList'\nimport React, { Suspense, useEffect, useState } from 'react'\nimport { useLocation } from 'react-router-dom'\nimport { fetchMovies } from '../components/Api/Api'\n\nconst HomePage = () => {\n  const [movies, setMovies] = useState([])\n  const location = useLocation()\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const moviesData = await fetchMovies();\n      setMovies(moviesData)\n    }\n    fetchData()\n  }, [])\n\n  return (\n    <Suspense fallback={<div>Loading...</div>}>\n      <h1> Trending movies</h1>\n      <MovieList to={'movies/'} location={location} movies={movies} />\n\n    </Suspense>\n\n  )\n}\n\nexport default HomePage"],"names":["movieApi","axios","baseURL","params","api_key","fetchMovies","async","get","data","results","fetchMoviesByQuery","query","searchQuery","fetchMoviesById","concat","id","append_to_response","error","console","message","fetchCastById","fetchReviewsById","_ref","location","movies","to","_jsx","children","map","_ref2","original_title","Link","state","from","HomePage","setMovies","useState","useLocation","useEffect","moviesData","fetchData","_jsxs","Suspense","fallback","MovieList"],"sourceRoot":""}