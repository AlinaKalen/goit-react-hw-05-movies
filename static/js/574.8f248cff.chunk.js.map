{"version":3,"file":"static/js/574.8f248cff.chunk.js","mappings":"qLAEA,MAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QALY,sCASHC,EAAcC,gBACFN,EAASO,IAAI,uBACpBC,KAAKC,QAGVC,EAAqBJ,gBACTN,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CAAEQ,MAAOC,MAEHJ,KAAKC,QAGVI,EAAkBP,UAC7B,IAME,aALuBN,EAASO,IAAI,UAADO,OAAWC,GAAM,CAClDZ,OAAQ,CACNa,mBAAoB,sBAGRR,IAIlB,CAHE,MAAOS,GAEP,MADAC,QAAQD,MAAM,8BAA+BA,EAAME,SAC7CF,CACR,GAGWG,EAAgBd,gBACJN,EAASO,IAAI,UAADO,OAAWC,EAAE,cAChCP,KAGLa,EAAmBf,gBACPN,EAASO,IAAI,UAADO,OAAWC,EAAE,cAChCP,I,qFCxClB,MA4BA,EA5BmBc,KACjB,MAAOC,EAASC,IAAcC,EAAAA,EAAAA,UAAS,KACjC,SAAEC,IAAaC,EAAAA,EAAAA,MAUrB,OARAC,EAAAA,EAAAA,YAAU,KACYtB,WAClB,MAAMuB,QAAoBR,EAAAA,EAAAA,IAAiBK,EAAU,YACrDF,EAAWK,EAAY,EAEzBC,EAAa,GACZ,CAACJ,KAGFK,EAAAA,EAAAA,KAAAC,EAAAA,SAAA,CAAAC,SACKV,EAAQW,OACD,OAAPX,QAAO,IAAPA,OAAO,EAAPA,EAAUY,KAAIC,IACfL,EAAAA,EAAAA,KAAA,MAAAE,UACEI,EAAAA,EAAAA,MAAA,MAAAJ,SAAA,EACEI,EAAAA,EAAAA,MAAA,KAAAJ,SAAA,CAAG,WAASG,EAAIE,WAChBD,EAAAA,EAAAA,MAAA,KAAAJ,SAAA,CAAG,WAASG,EAAIG,eAHXH,EAAIrB,OAObgB,EAAAA,EAAAA,KAAA,KAAAE,SAAG,2CACJ,C","sources":["components/Api/Api.js","pages/ReviewPage.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst api_key = '9ec68717ac0ee3cd927e52637a51d9f9';\n\nconst movieApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: api_key,\n  },\n});\n\nexport const fetchMovies = async () => {\n  const response = await movieApi.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMoviesByQuery = async (searchQuery) => {\n  const response = await movieApi.get('/search/movie', {\n    params: { query: searchQuery },\n  });\n  return response.data.results;\n};\n\nexport const fetchMoviesById = async (id) => {\n  try {\n    const response = await movieApi.get(`/movie/${id}`, {\n      params: {\n        append_to_response: 'credits,reviews',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie by ID:', error.message);\n    throw error;\n  }\n};\n\nexport const fetchCastById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/credits`);\n  return response.data;\n};\n\nexport const fetchReviewsById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n","import React, { useEffect, useState } from 'react'\nimport { useParams } from 'react-router-dom'\nimport { fetchReviewsById } from '../components/Api/Api'\n\nconst ReviewPage = () => {\n  const [reviews, setReviews] = useState([])\n  const { moviesId } = useParams()\n\n  useEffect(() => {\n    const fechReviews = async () => {\n      const reviewsData = await fetchReviewsById(moviesId, '/reviews')\n      setReviews(reviewsData)\n    }\n    fechReviews()\n  }, [moviesId])\n\n  return (\n    <>\n      {!!reviews.length \n      ? (reviews)?.map(rev => (\n        <ul key={rev.id}>\n          <li>\n            <p>Author: {rev.author}</p>\n            <p>Author: {rev.content}</p>\n          </li>\n        </ul>\n      )) \n      : <p> Sorry, we couldn't find any reviews </p>}\n    </>\n  )\n}\n\nexport default ReviewPage"],"names":["movieApi","axios","baseURL","params","api_key","fetchMovies","async","get","data","results","fetchMoviesByQuery","query","searchQuery","fetchMoviesById","concat","id","append_to_response","error","console","message","fetchCastById","fetchReviewsById","ReviewPage","reviews","setReviews","useState","moviesId","useParams","useEffect","reviewsData","fechReviews","_jsx","_Fragment","children","length","map","rev","_jsxs","author","content"],"sourceRoot":""}