{"version":3,"file":"static/js/776.8d266a52.chunk.js","mappings":"qLAEA,MAEMA,E,OAAWC,EAAAA,OAAa,CAC5BC,QAAS,gCACTC,OAAQ,CACNC,QALY,sCASHC,EAAcC,gBACFN,EAASO,IAAI,uBACpBC,KAAKC,QAGVC,EAAqBJ,gBACTN,EAASO,IAAI,gBAAiB,CACnDJ,OAAQ,CAAEQ,MAAOC,MAEHJ,KAAKC,QAGVI,EAAkBP,UAC7B,IAME,aALuBN,EAASO,IAAI,UAADO,OAAWC,GAAM,CAClDZ,OAAQ,CACNa,mBAAoB,oBAGRR,IAIlB,CAHE,MAAOS,GAEP,MADAC,QAAQD,MAAM,8BAA+BA,EAAME,SAC7CF,CACR,GAGWG,EAAgBd,gBACJN,EAASO,IAAI,UAADO,OAAWC,EAAE,YAChCP,KAGLa,EAAmBf,gBACPN,EAASO,IAAI,UAADO,OAAWC,EAAE,cAChCP,I,8JCtClB,MAuDA,EAvDiBc,KACf,MAAOC,EAAOC,IAAYC,EAAAA,EAAAA,UAAS,KAC7B,QAAEC,IAAYC,EAAAA,EAAAA,OACbC,EAAWC,IAAgBJ,EAAAA,EAAAA,WAAS,GAmB3C,OAjBAK,EAAAA,EAAAA,YAAU,KACQxB,WACd,IACE,GAAIoB,EAAS,CACX,MAAMK,QAAkBX,EAAAA,EAAAA,IAAcM,GACtCF,EAASO,EAAUC,KACrB,CAKF,CAJE,MAAOf,GACPC,QAAQD,MAAM,uBAAwBA,EAAME,QAC9C,CAAC,QACCU,GAAa,EACf,GAGFI,EAAS,GACR,CAACP,KAGFQ,EAAAA,EAAAA,MAAAC,EAAAA,SAAA,CAAAC,SAAA,CACGR,IAAaS,EAAAA,EAAAA,KAAA,OAAAD,SAAK,gBACjBR,GAAaL,EAAMe,OAAS,IAC5BD,EAAAA,EAAAA,KAAA,OAAKE,UAAWC,EAAAA,EAAAA,aAAiBJ,SAC9Bb,EAAMkB,KAAKT,IACVK,EAAAA,EAAAA,KAAA,MAAkBE,UAAWC,EAAAA,EAAAA,IAAQJ,UACnCF,EAAAA,EAAAA,MAAA,MAAIK,UAAWC,EAAAA,EAAAA,QAAYJ,SAAA,EACzBC,EAAAA,EAAAA,KAAA,OACEK,IACEV,EAAKW,aAAY,mCAAA7B,OACoBkB,EAAKW,cACxCC,EAEJC,IAAKb,EAAKc,KACVC,MAAM,SAIRb,EAAAA,EAAAA,MAAA,OAAAE,SAAA,EACEF,EAAAA,EAAAA,MAAA,KAAGK,UAAWC,EAAAA,EAAAA,OAAWJ,SAAA,CAAC,SAAOJ,EAAKc,SACtCZ,EAAAA,EAAAA,MAAA,KAAAE,SAAA,CAAG,cAAYJ,EAAKgB,oBAfjBhB,EAAKjB,SAsBlBa,GAA8B,IAAjBL,EAAMe,SAAgBD,EAAAA,EAAAA,KAAA,KAAAD,SAAG,oCACvC,C,gCCxDP,SAAgB,UAAY,0BAA0B,OAAS,uBAAuB,IAAM,oBAAoB,aAAe,6BAA6B,QAAU,wBAAwB,WAAa,2BAA2B,OAAS,uB","sources":["components/Api/Api.js","pages/CastPage.jsx","webpack://react-homework-template/./src/components/MoviesList/Movies.module.css?fddf"],"sourcesContent":["import axios from 'axios';\n\nconst api_key = '9ec68717ac0ee3cd927e52637a51d9f9';\n\nconst movieApi = axios.create({\n  baseURL: 'https://api.themoviedb.org/3/',\n  params: {\n    api_key: api_key,\n  },\n});\n\nexport const fetchMovies = async () => {\n  const response = await movieApi.get('trending/movie/day');\n  return response.data.results;\n};\n\nexport const fetchMoviesByQuery = async (searchQuery) => {\n  const response = await movieApi.get('/search/movie', {\n    params: { query: searchQuery },\n  });\n  return response.data.results;\n};\n\nexport const fetchMoviesById = async (id) => {\n  try {\n    const response = await movieApi.get(`/movie/${id}`, {\n      params: {\n        append_to_response: 'casts,reviews',\n      },\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching movie by ID:', error.message);\n    throw error;\n  }\n};\n\nexport const fetchCastById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/casts`);\n  return response.data;\n};\n\nexport const fetchReviewsById = async (id) => {\n  const response = await movieApi.get(`/movie/${id}/reviews`);\n  return response.data;\n};\n","import React, { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchCastById } from '../components/Api/Api';\nimport placeholder from 'img/picture.jpeg';\nimport css from '../components/MoviesList/Movies.module.css'\n\nconst CastPage = () => {\n  const [casts, setCasts] = useState([]);\n  const { movieId } = useParams();\n  const [isLoading, setIsLoading] = useState(true);\n\n  useEffect(() => {\n    const getCast = async () => {\n      try {\n        if (movieId) {\n          const castsData = await fetchCastById(movieId);\n          setCasts(castsData.cast);\n        }\n      } catch (error) {\n        console.error('Error fetching cast:', error.message);\n      } finally {\n        setIsLoading(false);\n      }\n    };\n\n    getCast();\n  }, [movieId]); \n\n  return (\n    <>\n      {isLoading && <div>Loading...</div>}\n      {!isLoading && casts.length > 0 && (\n        <div className={css.CstContsiner}>\n          {casts.map((cast) => (\n            <ul key={cast.id} className={css.cst}>\n              <li className={css.cstlist}>\n                <img\n                  src={\n                    cast.profile_path\n                    ? `https://image.tmdb.org/t/p/w200/${cast.profile_path}`\n                    : placeholder\n                  }\n                  alt={cast.name}\n                  width=\"250\"\n                 \n                  \n                />\n                <div>\n                  <p className={css.Author}>Name: {cast.name}</p>\n                  <p>Character: {cast.character}</p>\n                </div>\n              </li>\n            </ul>\n          ))}\n        </div>\n      )}\n      {!isLoading && casts.length === 0 && <p>No cast information available</p>}\n    </>\n  );\n};\n\nexport default CastPage;\n","// extracted by mini-css-extract-plugin\nexport default {\"MovieList\":\"Movies_MovieList__2lEkh\",\"header\":\"Movies_header__vz94V\",\"cst\":\"Movies_cst__xWtN2\",\"CstContsiner\":\"Movies_CstContsiner__giMxd\",\"cstlist\":\"Movies_cstlist__Ir+vv\",\"ReviewList\":\"Movies_ReviewList__BvK3S\",\"Author\":\"Movies_Author__+argF\"};"],"names":["movieApi","axios","baseURL","params","api_key","fetchMovies","async","get","data","results","fetchMoviesByQuery","query","searchQuery","fetchMoviesById","concat","id","append_to_response","error","console","message","fetchCastById","fetchReviewsById","CastPage","casts","setCasts","useState","movieId","useParams","isLoading","setIsLoading","useEffect","castsData","cast","getCast","_jsxs","_Fragment","children","_jsx","length","className","css","map","src","profile_path","placeholder","alt","name","width","character"],"sourceRoot":""}